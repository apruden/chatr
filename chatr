#!/bin/python

import time, json, datetime, os, uuid, configparser, argparse
from threading import Thread
from flask import Flask, render_template, session, request, send_from_directory, jsonify, url_for, redirect
import flask.json
from functools import wraps

from flask_socketio import SocketIO, emit, join_room, leave_room, \
    close_room, rooms, disconnect, send

from flask_sqlalchemy import SQLAlchemy, BaseQuery
from sqlalchemy_searchable import SearchQueryMixin
from sqlalchemy_utils.types import TSVectorType
from sqlalchemy_searchable import make_searchable

from sqlalchemy.ext.declarative import DeclarativeMeta
from sqlalchemy.ext.declarative import declared_attr
from geoalchemy2.types import Geometry
from geoalchemy2.functions import ST_Distance
from geoalchemy2.elements import WKTElement, WKBElement
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.schema import Index, UniqueConstraint
from geoalchemy2.shape import to_shape

from flask_oauthlib.client import OAuth, OAuthException
from PIL import Image
from resizeimage import resizeimage
from sqlalchemy.orm.attributes import flag_modified


import eventlet.debug
#eventlet.debug.hub_blocking_detection(True)

from sqlalchemy.exc import IntegrityError

parser = argparse.ArgumentParser()
parser.add_argument('--init', action='store_true')

cli_args = parser.parse_args()

_sids = {} #user id to sid

config = configparser.ConfigParser()
config.read('chatr.ini')
app = Flask(__name__, static_url_path='/')
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql+psycopg2://chatr:Admin123@localhost/chatr'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SQLALCHEMY_ECHO'] = True
app.config['SECRET_KEY'] = 'secret!'

FACEBOOK_APP_ID = config.get('facebook', 'app_id')
FACEBOOK_APP_SECRET = config.get('facebook', 'app_secret')
GOOGLE_APP_ID = config.get('google', 'app_id')
GOOGLE_APP_SECRET = config.get('google', 'app_secret')

oauth = OAuth(app)

facebook = oauth.remote_app(
    'facebook',
    consumer_key=FACEBOOK_APP_ID,
    consumer_secret=FACEBOOK_APP_SECRET,
    request_token_params={'scope': 'email'},
    base_url='https://graph.facebook.com',
    request_token_url=None,
    access_token_url='/oauth/access_token',
    access_token_method='GET',
    authorize_url='https://www.facebook.com/dialog/oauth'
)

google = oauth.remote_app(
    'google',
    consumer_key=GOOGLE_APP_ID,
    consumer_secret=GOOGLE_APP_SECRET,
    request_token_params={'scope': 'email profile'},
    base_url='https://people.googleapis.com',
    request_token_url=None,
    access_token_method='POST',
    access_token_url='https://accounts.google.com/o/oauth2/token',
    authorize_url='https://accounts.google.com/o/oauth2/auth',
)

socketio = SocketIO(app)
db = SQLAlchemy(app)
make_searchable()


def login_user(user):
    session['user_id'] = user.id


def logout_user():
    del session['user_id']


def login_required(f):
    @wraps(f)
    def decorator(*args, **kwargs):
        if 'user_id' not in session:
            return jsonify(error='auth'), 401
        return f(*args, **kwargs)

    return decorator


class AlchemyEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj.__class__, DeclarativeMeta):
            return obj._json()

        return json.JSONEncoder.default(self, obj)


class JsonMixin(object):
    def _json(self):
        obj = self
        fields = {}
        for field in [x for x in dir(obj) if not x.startswith('_') and x != 'metadata']:
            data = obj.__getattribute__(field)
            try:
                json.dumps(data) # this will fail on non-encodable values, like other classes
                fields[field] = data
            except TypeError:
                if isinstance(data, WKBElement):
                    fields[field] = 'SRID=4326;%s' % (to_shape(data).wkt,)
                elif isinstance(data, datetime.date):
                    fields[field] = data.strftime('%Y-%m-%d')
                else:
                    fields[field] = None
        return fields


def dumps(obj):
    return flask.json.dumps(obj, cls=AlchemyEncoder)


class User(db.Model, JsonMixin):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(255), unique=True)
    password = db.Column(db.String(255))
    confirmed_at = db.Column(db.DateTime())

    __table_args__ = (Index('ix_user_email', 'email'),)


class Connection(db.Model, JsonMixin):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer)
    provider_id = db.Column(db.String(255))
    provider_user_id = db.Column(db.String(255))
    access_token = db.Column(db.String(255))
    secret = db.Column(db.String(255))
    full_name = db.Column(db.String(255))
    display_name = db.Column(db.String(255))
    profile_url = db.Column(db.String(512))
    image_url = db.Column(db.String(512))
    rank = db.Column(db.Integer)

    __table_args__ = (Index('ix_connection_user_id', 'user_id'),
            Index('ix_connection_provider_user_id', 'provider_user_id'))


class Profile(db.Model, JsonMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(255))
    gender = db.Column(db.Integer)
    location = db.Column(Geometry(geometry_type='POINT', srid=4326)) # SRID=4326;POINT(0.00 0.00)
    dob = db.Column(db.Date)
    headline = db.Column(db.Text)
    about = db.Column(db.Text)
    city = db.Column(db.String(255))
    data = db.Column(JSONB)
    latestSeen = db.Column(db.DateTime)
    _public = True

    __table_args__ = (Index('ix_profile_search', 'gender', 'location', 'dob', 'latestSeen'),)

    @property
    def online(self):
        #TODO: use redis in distributed mode?
        return self.id in _sids

    @property
    def age(self):
        #TODO: better way to calc ages? y1 - y2 ,then months, then days?
        if self.dob:
            return int((datetime.datetime.now().date() - self.dob).days / 365)
        return 0

    def _json(self):
        res = super(Profile, self)._json()

        if self._public:
            res.pop('dob', None)
            res['data']['photos'] = [p for p in self.data.get('photos', []) if not p.get('isPrivate', False)]

        return res


class Message(db.Model, JsonMixin):
    id = db.Column(db.Integer, primary_key=True)
    a = db.Column(db.Integer)
    b = db.Column(db.Integer)
    data = db.Column(JSONB)
    sent = db.Column(db.DateTime)
    to = db.Column(db.Integer)
    fro = db.Column(db.Integer)
    read = db.Column(db.DateTime)

    __table_args__ = (Index('ix_message_a_b', 'a', 'b'),
            Index('ix_message_to_read', 'to', 'read'))

    @property
    def online(self):
        #TODO: use redis in distributed mode?
        return self.fro in _sids


class Visit(db.Model, JsonMixin):
    to = db.Column(db.Integer, primary_key=True)
    fro = db.Column(db.Integer, primary_key=True)
    modified = db.Column(db.DateTime)
    data = db.Column(JSONB)
    read = db.Column(db.Boolean)
    matched = db.Column(db.Boolean)

    __table_args__ = (Index('ix_visit', 'to', 'read'),)

    @property
    def online(self):
        #TODO: use redis in distributed mode?
        return self.fro in _sids


class Like(db.Model):
    to = db.Column(db.Integer, primary_key=True)
    fro = db.Column(db.Integer, primary_key=True)


class Blocking(db.Model):
    to = db.Column(db.Integer, primary_key=True)
    fro = db.Column(db.Integer, primary_key=True)


class CityQuery(BaseQuery, SearchQueryMixin):
    pass


class City(db.Model, JsonMixin):
    query_class = CityQuery
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.Unicode(255))
    country = db.Column(db.String(255))
    location = db.Column(Geometry(geometry_type='POINT', srid=4326)) # SRID=4326;POINT(0.00 0.00)
    search_vector = db.Column(TSVectorType('name'))


class InterestQuery(BaseQuery, SearchQueryMixin):
    pass


class Interest(db.Model):
    query_class = InterestQuery
    name = db.Column(db.Unicode(64), primary_key=True)
    search_vector = db.Column(TSVectorType('name'))

    def _json(self):
        return self.name


def _create_user(email, password):
    user = User(email=email, password=password)
    db.session.add(user)
    db.session.commit()
    return user


@app.route('/api/_logout')
@login_required
def app_logout():
    logout_user()
    return redirect('/')


@app.route('/api/_login', methods=['POST'])
def app_login():
    if request.json.get('access_token'):
        provider = request.json.get('provider')
        if provider == 'facebook':
            session['oauth_token'] = (request.json.get('access_token'), '')
            me = facebook.get('/me?fields=id,email')
        elif provider == 'google':
            session['oauth_token'] = (request.json.get('access_token'), '')
            me = google.get('/v1/people/me')
            me.data['id'] = me.data['resourceName']
            me.data['email'] = next((x for x in me.data.get('emailAddresses', [])), {'value': None})['value']
        else:
            raise Exception('invalid provider')

        connection = Connection.query.filter_by(provider_user_id=me.data['id']).first()

        if not connection:
            user = User.query.filter(User.email == me.data.get('email')).first()

            if not user:
                user = User(email = me.data.get('email'), #TODO: get email
                        confirmed_at = datetime.datetime.now())
                db.session.add(user)
                db.session.commit()

            connection = Connection(
                    user_id = user.id,
                    provider_id = provider,
                    provider_user_id = me.data['id'],
                    access_token = request.json['access_token'],
                    secret = None,
                    full_name = None,
                    display_name = None,
                    profile_url = None,
                    image_url = None,
                    rank = None)
            db.session.add(connection)
            db.session.commit()

        session['user_id'] = connection.user_id

        return jsonify(message='ok')
    else:

        user = User.query.filter(User.email == request.json.get('email')).first()
        if user:
            #TODO: verify password
            login_user(user)
            return jsonify(message='ok')
        else:
            user = _create_user(request.json.get('email'), request.json.get('password'))
            login_user(user)
            return jsonify(message='ok')


@facebook.tokengetter
def get_facebook_oauth_token():
    return session.get('oauth_token')


@google.tokengetter
def get_google_oauth_token():
    return session.get('oauth_token')


@app.route('/api/_upload', methods=['POST'])
@login_required
def upload():
    file = request.files['file']
    filename = '%s.jpg' % (uuid.uuid4(),)
    file.save(os.path.join('assets', filename))
    return jsonify(filename=filename)


@app.route('/api/cities')
@login_required
def cities():
    return dumps(City.query.search(request.args.get('q')).limit(10).all())

@app.route('/api/interests')
@login_required
def interests():
    return dumps(Interest.query.search(request.args.get('q')).limit(10).all())

@app.route('/assets/<id>')
def assets(id):
    return send_from_directory('assets', id)


@app.route('/api/profiles/<id>/_block', methods=['POST'])
@login_required
def profile_block(id):
    user_id = int(session['user_id'])
    blocking = Blocking(to=user_id, fro=int(id))
    db.session.add(blocking)

    a = int(id)
    b = user_id
    (a,b) = (a,b) if a < b else (b,a)
    Message.query.filter_by(a=a, b=b).delete()

    db.session.commit()

    return jsonify(message='ok')


@app.route('/api/profiles/<id>/_unblock', methods=['POST'])
@login_required
def profile_unblock(id):
    user_id = int(session['user_id'])
    Blocking.query.get(to=user_id, fro=int(id)).delete()
    db.session.commit()
    return jsonify(message='ok')


@app.route('/api/profiles/<id>/_like', methods=['POST'])
@login_required
def profile_like(id):
    try:
        id = int(id)
        user_id = int(session['user_id'])
        like = Like(to=id, fro=user_id)
        db.session.add(like)

        if request.json.get('matched'):
            visit = Visit(to=id,
                    fro=user_id,
                    data=request.json['fro'],
                    modified=datetime.datetime.now(),
                    matched=True)
            visit_rel = Visit(to=user_id,
                    fro=id,
                    data=request.json['to'],
                    modified=datetime.datetime.now(),
                    matched=True)
            db.session.add(visit)
            db.session.add(visit_rel)
            try:
                if user_id in _sids:
                    socketio.emit('feed', {visit: 1}, room=_sids[user_id])
                if user_id in _sids:
                    socketio.emit('feed', {visit: 1}, room=_sids[id])
            except:
                pass

        db.session.commit()
    except Exception as e:
        println(e)

    return jsonify(message='OK')

@app.route('/api/profiles', methods=['POST'], defaults = {'id': None})
@app.route('/api/profiles/<id>', methods=['GET', 'POST', 'DELETE'])
@login_required
def profiles(id):
    public = True
    user_id = int(session['user_id'])

    if id == 'me':
        id = user_id
        public = False
    else:
        id = int(id) if id else None

    profile = Profile.query.get(id) if id else None
    if not profile and id:
        return jsonify(message='not found'), 404

    if request.method == 'GET':
        if user_id != id and request.args:
            try:
                visit = Visit(to=id,
                        fro=user_id,
                        data=request.args,
                        modified=datetime.datetime.now())
                db.session.add(visit)
                db.session.commit()
                socketio.emit('feed', {visit: 1}, room=_sids[id])
            except:
                pass

        profile._public = public
        return dumps(profile)
    elif request.method == 'POST':
        request.json.pop('online', None)
        request.json.pop('age', None)
        request.json.pop('picture', None)

        try:
            pic = next(x for x in request.json.get('data', {}).get('photos', []) if x.get('isMain', False))
            is_new = pic.get('isNew')
        except StopIteration:
            pass

        for x in request.json.get('data', {}).get('photos', []):
            x.pop('isNew', None)

        if not profile:
            profile = Profile(id=user_id)
            db.session.add(profile)

        for k, v in request.json.items():
            setattr(profile, k, v)


        db.session.commit()

        if pic and is_new:
           with open('assets/%s' % (pic['filename'],), 'r+b') as f:
                with Image.open(f) as image:
                    main_photo = 'assets/%s_s.jpg' % (profile.id,)
                    cover = resizeimage.resize_cover(image, [50, 50])
                    cover.save(main_photo, image.format)
                    main_photo = 'assets/%s_l.jpg' % (profile.id,)
                    cover = resizeimage.resize_cover(image, [200, 200])
                    cover.save(main_photo, image.format)

        profile._public = public

        if profile.data.get('interests'):
            for i in profile.data.get('interests', []):
                try:
                    db.session.add(Interest(name=i))
                    db.session.commit()
                except IntegrityError as e:
                    db.session.rollback()

        return dumps(profile)
    elif request.method == 'DELETE':
        db.session.delete(profile)
        User.query.filter_by(id = profile.id).delete()
        Connection.query.filter_by(user_id = profile.id).delete()
        db.session.commit()
        return jsonify(message='ok')


@app.route('/api/profiles/me/criteria', methods=['POST'])
@login_required
def updateCriteria():
    profile = Profile.query.get(int(session['user_id']))
    profile.data['criteria'] = request.json
    flag_modified(profile, 'data')
    db.session.commit()

    return jsonify(message='ok')

@app.route('/api/feed')
@login_required
def feed():
    user_id = int(session['user_id'])
    msg = Message.query.filter_by(to=user_id, read=None).count()
    visit = Visit.query.filter_by(to=user_id, read=False).count()
    return jsonify(msg=msg, visit=visit)


@app.route('/api/search')
@login_required
def search():
    loc = request.args.get('location').split(';')[1]
    pt = WKTElement(loc, srid=4326)
    ageFrom = int(request.args.get('dobFrom', 18))
    ageTo = int(request.args.get('dobTo', 100))
    offset = int(request.args.get('offset', 0))

    profiles = Profile.query.filter(
            (Profile.gender == int(request.args.get('gender', 0))) &
            (Profile.dob >= datetime.datetime.now() - datetime.timedelta(days=365*ageTo)) &
            (Profile.dob <= datetime.datetime.now() - datetime.timedelta(days=365*ageFrom))
            ).filter(ST_Distance(Profile.location, pt) < int(request.args.get('dist', 50000))).order_by(Profile.latestSeen).offset(offset).limit(20).all()

    if request.args.get('include_matched'):
        user_id = int(session['user_id'])
        likes = Like.query.filter(
                (Like.fro.in_([p.id for p in profiles])) &
                (Like.to == user_id)).all()
        profiles_map = {p.id: p for p in profiles}

        for l in likes:
            profiles_map[l.fro].matched = True

    return dumps(profiles)

@app.route('/api/chats', defaults={'id': None})
@app.route('/api/chats/<id>')
@login_required
def chats(id):
    offset = int(request.args.get('offset', 0))
    user_id = int(session['user_id'])
    if id:
        a = int(id)
        b = user_id
        (a,b) = (a,b) if a < b else (b,a)
        messages = Message.query.filter_by(a=a, b=b)\
                .offset(offset)\
                .limit(20)\
                .all()
    else:
        to = user_id
        messages = Message.query.filter_by(to=to)\
                .order_by(Message.a, Message.b, Message.id.desc())\
                .distinct(Message.a, Message.b)\
                .offset(offset)\
                .limit(20)\
                .all()

    return dumps(messages)


@app.route('/api/visits')
@login_required
def visits():
    offset = int(request.args.get('offset', 0))
    to = int(session['user_id'])
    visits = Visit.query.filter_by(to=to).offset(offset).limit(20).all()
    unread = [v.id for v in visits if not v.read]

    if unread:
        db.session.query(Visit).filter(
                Visit.id.in_(unread)).update({Visit.read: True}, synchronize_session=False)
        db.session.commit()

    return dumps(visits)


@socketio.on('msg')
def sio_send_message(message):
    msg = Message(**message)
    blocking = Blocking.query.filter_by(to=msg.to, fro=msg.fro).first() #TODO: cache

    if not blocking:
        #TODO: remove blocking if originator starts chat again
        db.session.add(msg)
        db.session.commit()

        if message['to'] in _sids:
            message['id'] = msg.id
            emit('msg', message, room=_sids[message['to']])


@socketio.on('ack')
def sio_ack_message(ack):
    t = datetime.datetime.now()
    db.session.query(Message).filter(Message.id == ack['id']).update({Message.read: t})
    db.session.commit()

    if ack['to'] in _sids:
        ack['read'] = t.strftime('%Y-%m-%dT%H:%M:%SZ')
        emit('ack', ack, room=_sids[ack['to']])


@socketio.on('connect')
def sio_connect_handler():
    if 'user_id' in session:
        user_id = int(session['user_id'])
        db.session.query(Profile).filter(Profile.id == user_id).update(
                { Profile.latestSeen: datetime.datetime.now() })
        db.session.commit()
        _sids[user_id] = request.sid


@socketio.on('disconnect')
def sio_isconnect_handler():
    _sids.pop(int(session['user_id']), None)


@app.route('/', defaults={'path': 'index.html'})
@app.route('/<path:path>')
def dist(path):
    return send_from_directory('src/webapp/dist', path)


if __name__ == '__main__':
    if cli_args.init:
        try:
            db.drop_all()
        except:
            pass

        db.create_all()
        _create_user('admin@test.com', 'password')

    socketio.run(app)
