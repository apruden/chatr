# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  criterion: Criterion!
  email: String!
  id: String!
}

input AccountInput {
  criterion: CriterionInput!
  email: String!
  id: String!
}

input ActionInput {
  name: String!
  payload: String!
  subject: String!
  target: String!
}

type Criterion {
  ageMax: Float!
  ageMin: Float!
  distance: Float!
  gender: String!
  location: String!
}

input CriterionInput {
  ageMax: Float!
  ageMin: Float!
  distance: Float!
  gender: String!
  location: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Match {
  dob: Float!
  headline: String!
  id: String!
  latestActive: DateTime!
  location: String!
  picture: String!
}

type Media {
  filename: String!
}

input MediaInput {
  filename: String!
}

type Message {
  from: String!
  read: Boolean!
  sent: DateTime!
  text: String!
  to: String!
}

input MessageInput {
  text: String!
  to: String!
}

type Mutation {
  newAction(data: ActionInput!): Boolean!
  sendMessage(data: MessageInput!): Message!
  updateAccount(data: AccountInput!): Account!
  updateProfile(data: ProfileInput!): Profile!
}

type Notification {
  name: String!
  payload: String!
  sent: DateTime!
  to: String!
}

type Profile {
  description: String!
  dob: Float!
  gender: String!
  headline: String!
  id: String!
  interests: [String!]!
  latestActive: DateTime!
  location: String!
  pictures: [Media!]!
}

input ProfileInput {
  description: String!
  dob: Float!
  gender: String!
  headline: String!
  interests: [String!]!
  location: String!
  pictures: [MediaInput!]!
}

type Query {
  getAccount: Account!
  getLatestMessages(from: String!, limit: Int = 25, offset: Int = 0): [Message!]!
  getMessages(from: String!, limit: Int = 25, offset: Int = 0): [Message!]!
  getNotifications(limit: Int = 25, offset: Int = 0): [Notification!]!
  getProfile(id: String!): Profile!
  register(data: RegistrationInput!): Registration!
  search(criterion: CriterionInput!, limit: Int = 25, offset: Int = 0): [Match!]!
}

type Registration {
  token: String!
}

input RegistrationInput {
  account: AccountInput!
  profile: ProfileInput!
}

type Subscription {
  onNotification: Message!
}
